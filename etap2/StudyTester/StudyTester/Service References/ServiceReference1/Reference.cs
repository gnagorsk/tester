//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StudyTester.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ITestService")]
    public interface ITestService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/getCategories", ReplyAction="http://tempuri.org/ITestService/getCategoriesResponse")]
        System.Collections.Generic.Dictionary<int, string> getCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/getCategories", ReplyAction="http://tempuri.org/ITestService/getCategoriesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> getCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/getQuestions", ReplyAction="http://tempuri.org/ITestService/getQuestionsResponse")]
        System.Collections.Generic.Dictionary<int, string> getQuestions(int category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/getQuestions", ReplyAction="http://tempuri.org/ITestService/getQuestionsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> getQuestionsAsync(int category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/getQuestionAnswers", ReplyAction="http://tempuri.org/ITestService/getQuestionAnswersResponse")]
        System.Collections.Generic.Dictionary<int, string> getQuestionAnswers(int question);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/getQuestionAnswers", ReplyAction="http://tempuri.org/ITestService/getQuestionAnswersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> getQuestionAnswersAsync(int question);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/validateAnswer", ReplyAction="http://tempuri.org/ITestService/validateAnswerResponse")]
        bool validateAnswer(int question, int answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/validateAnswer", ReplyAction="http://tempuri.org/ITestService/validateAnswerResponse")]
        System.Threading.Tasks.Task<bool> validateAnswerAsync(int question, int answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/getSubcategories", ReplyAction="http://tempuri.org/ITestService/getSubcategoriesResponse")]
        System.Collections.Generic.Dictionary<int, string> getSubcategories(int category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/getSubcategories", ReplyAction="http://tempuri.org/ITestService/getSubcategoriesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> getSubcategoriesAsync(int category);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITestServiceChannel : StudyTester.ServiceReference1.ITestService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestServiceClient : System.ServiceModel.ClientBase<StudyTester.ServiceReference1.ITestService>, StudyTester.ServiceReference1.ITestService {
        
        public TestServiceClient() {
        }
        
        public TestServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TestServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.Dictionary<int, string> getCategories() {
            return base.Channel.getCategories();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> getCategoriesAsync() {
            return base.Channel.getCategoriesAsync();
        }
        
        public System.Collections.Generic.Dictionary<int, string> getQuestions(int category) {
            return base.Channel.getQuestions(category);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> getQuestionsAsync(int category) {
            return base.Channel.getQuestionsAsync(category);
        }
        
        public System.Collections.Generic.Dictionary<int, string> getQuestionAnswers(int question) {
            return base.Channel.getQuestionAnswers(question);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> getQuestionAnswersAsync(int question) {
            return base.Channel.getQuestionAnswersAsync(question);
        }
        
        public bool validateAnswer(int question, int answer) {
            return base.Channel.validateAnswer(question, answer);
        }
        
        public System.Threading.Tasks.Task<bool> validateAnswerAsync(int question, int answer) {
            return base.Channel.validateAnswerAsync(question, answer);
        }
        
        public System.Collections.Generic.Dictionary<int, string> getSubcategories(int category) {
            return base.Channel.getSubcategories(category);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> getSubcategoriesAsync(int category) {
            return base.Channel.getSubcategoriesAsync(category);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ITestManagement")]
    public interface ITestManagement {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestManagement/createCategory", ReplyAction="http://tempuri.org/ITestManagement/createCategoryResponse")]
        int createCategory(string title, int category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestManagement/createCategory", ReplyAction="http://tempuri.org/ITestManagement/createCategoryResponse")]
        System.Threading.Tasks.Task<int> createCategoryAsync(string title, int category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestManagement/createQuestion", ReplyAction="http://tempuri.org/ITestManagement/createQuestionResponse")]
        int createQuestion(string text, int category, int correct_answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestManagement/createQuestion", ReplyAction="http://tempuri.org/ITestManagement/createQuestionResponse")]
        System.Threading.Tasks.Task<int> createQuestionAsync(string text, int category, int correct_answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestManagement/createAnswer", ReplyAction="http://tempuri.org/ITestManagement/createAnswerResponse")]
        int createAnswer(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestManagement/createAnswer", ReplyAction="http://tempuri.org/ITestManagement/createAnswerResponse")]
        System.Threading.Tasks.Task<int> createAnswerAsync(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestManagement/addAnswerToQuestion", ReplyAction="http://tempuri.org/ITestManagement/addAnswerToQuestionResponse")]
        bool addAnswerToQuestion(int answer, int question);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestManagement/addAnswerToQuestion", ReplyAction="http://tempuri.org/ITestManagement/addAnswerToQuestionResponse")]
        System.Threading.Tasks.Task<bool> addAnswerToQuestionAsync(int answer, int question);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestManagement/removeAnswerFromQuestion", ReplyAction="http://tempuri.org/ITestManagement/removeAnswerFromQuestionResponse")]
        bool removeAnswerFromQuestion(int answer, int question);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestManagement/removeAnswerFromQuestion", ReplyAction="http://tempuri.org/ITestManagement/removeAnswerFromQuestionResponse")]
        System.Threading.Tasks.Task<bool> removeAnswerFromQuestionAsync(int answer, int question);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestManagement/deleteCategory", ReplyAction="http://tempuri.org/ITestManagement/deleteCategoryResponse")]
        bool deleteCategory(int category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestManagement/deleteCategory", ReplyAction="http://tempuri.org/ITestManagement/deleteCategoryResponse")]
        System.Threading.Tasks.Task<bool> deleteCategoryAsync(int category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestManagement/deleteQuestion", ReplyAction="http://tempuri.org/ITestManagement/deleteQuestionResponse")]
        bool deleteQuestion(int question);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestManagement/deleteQuestion", ReplyAction="http://tempuri.org/ITestManagement/deleteQuestionResponse")]
        System.Threading.Tasks.Task<bool> deleteQuestionAsync(int question);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITestManagementChannel : StudyTester.ServiceReference1.ITestManagement, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestManagementClient : System.ServiceModel.ClientBase<StudyTester.ServiceReference1.ITestManagement>, StudyTester.ServiceReference1.ITestManagement {
        
        public TestManagementClient() {
        }
        
        public TestManagementClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TestManagementClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestManagementClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestManagementClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int createCategory(string title, int category) {
            return base.Channel.createCategory(title, category);
        }
        
        public System.Threading.Tasks.Task<int> createCategoryAsync(string title, int category) {
            return base.Channel.createCategoryAsync(title, category);
        }
        
        public int createQuestion(string text, int category, int correct_answer) {
            return base.Channel.createQuestion(text, category, correct_answer);
        }
        
        public System.Threading.Tasks.Task<int> createQuestionAsync(string text, int category, int correct_answer) {
            return base.Channel.createQuestionAsync(text, category, correct_answer);
        }
        
        public int createAnswer(string text) {
            return base.Channel.createAnswer(text);
        }
        
        public System.Threading.Tasks.Task<int> createAnswerAsync(string text) {
            return base.Channel.createAnswerAsync(text);
        }
        
        public bool addAnswerToQuestion(int answer, int question) {
            return base.Channel.addAnswerToQuestion(answer, question);
        }
        
        public System.Threading.Tasks.Task<bool> addAnswerToQuestionAsync(int answer, int question) {
            return base.Channel.addAnswerToQuestionAsync(answer, question);
        }
        
        public bool removeAnswerFromQuestion(int answer, int question) {
            return base.Channel.removeAnswerFromQuestion(answer, question);
        }
        
        public System.Threading.Tasks.Task<bool> removeAnswerFromQuestionAsync(int answer, int question) {
            return base.Channel.removeAnswerFromQuestionAsync(answer, question);
        }
        
        public bool deleteCategory(int category) {
            return base.Channel.deleteCategory(category);
        }
        
        public System.Threading.Tasks.Task<bool> deleteCategoryAsync(int category) {
            return base.Channel.deleteCategoryAsync(category);
        }
        
        public bool deleteQuestion(int question) {
            return base.Channel.deleteQuestion(question);
        }
        
        public System.Threading.Tasks.Task<bool> deleteQuestionAsync(int question) {
            return base.Channel.deleteQuestionAsync(question);
        }
    }
}
